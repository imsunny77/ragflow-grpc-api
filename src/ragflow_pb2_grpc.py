# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

import ragflow_pb2 as ragflow__pb2

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in ragflow_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class RagServicesStub:
    """gRPC Service Definition"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateKnowledgeBase = channel.unary_unary(
            "/ragflow.RagServices/CreateKnowledgeBase",
            request_serializer=ragflow__pb2.CreateKnowledgeBaseRequest.SerializeToString,
            response_deserializer=ragflow__pb2.CreateKnowledgeBaseResponse.FromString,
            _registered_method=True,
        )
        self.ListDatasets = channel.unary_unary(
            "/ragflow.RagServices/ListDatasets",
            request_serializer=ragflow__pb2.ListDatasetsRequest.SerializeToString,
            response_deserializer=ragflow__pb2.ListDatasetsResponse.FromString,
            _registered_method=True,
        )
        self.UpdateDataset = channel.unary_unary(
            "/ragflow.RagServices/UpdateDataset",
            request_serializer=ragflow__pb2.UpdateDatasetRequest.SerializeToString,
            response_deserializer=ragflow__pb2.StatusResponse.FromString,
            _registered_method=True,
        )
        self.DeleteDatasets = channel.unary_unary(
            "/ragflow.RagServices/DeleteDatasets",
            request_serializer=ragflow__pb2.DeleteDatasetsRequest.SerializeToString,
            response_deserializer=ragflow__pb2.StatusResponse.FromString,
            _registered_method=True,
        )
        self.UploadDocument = channel.unary_unary(
            "/ragflow.RagServices/UploadDocument",
            request_serializer=ragflow__pb2.UploadDocumentRequest.SerializeToString,
            response_deserializer=ragflow__pb2.StatusResponse.FromString,
            _registered_method=True,
        )
        self.Chat = channel.unary_unary(
            "/ragflow.RagServices/Chat",
            request_serializer=ragflow__pb2.ChatRequest.SerializeToString,
            response_deserializer=ragflow__pb2.ChatResponse.FromString,
            _registered_method=True,
        )


class RagServicesServicer:
    """gRPC Service Definition"""

    def CreateKnowledgeBase(self, request, context):
        """Dataset Management"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UploadDocument(self, request, context):
        """Document Management"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Chat(self, request, context):
        """Chat"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RagServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateKnowledgeBase": grpc.unary_unary_rpc_method_handler(
            servicer.CreateKnowledgeBase,
            request_deserializer=ragflow__pb2.CreateKnowledgeBaseRequest.FromString,
            response_serializer=ragflow__pb2.CreateKnowledgeBaseResponse.SerializeToString,
        ),
        "ListDatasets": grpc.unary_unary_rpc_method_handler(
            servicer.ListDatasets,
            request_deserializer=ragflow__pb2.ListDatasetsRequest.FromString,
            response_serializer=ragflow__pb2.ListDatasetsResponse.SerializeToString,
        ),
        "UpdateDataset": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateDataset,
            request_deserializer=ragflow__pb2.UpdateDatasetRequest.FromString,
            response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
        ),
        "DeleteDatasets": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteDatasets,
            request_deserializer=ragflow__pb2.DeleteDatasetsRequest.FromString,
            response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
        ),
        "UploadDocument": grpc.unary_unary_rpc_method_handler(
            servicer.UploadDocument,
            request_deserializer=ragflow__pb2.UploadDocumentRequest.FromString,
            response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
        ),
        "Chat": grpc.unary_unary_rpc_method_handler(
            servicer.Chat,
            request_deserializer=ragflow__pb2.ChatRequest.FromString,
            response_serializer=ragflow__pb2.ChatResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ragflow.RagServices", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("ragflow.RagServices", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class RagServices:
    """gRPC Service Definition"""

    @staticmethod
    def CreateKnowledgeBase(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/CreateKnowledgeBase",
            ragflow__pb2.CreateKnowledgeBaseRequest.SerializeToString,
            ragflow__pb2.CreateKnowledgeBaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListDatasets(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/ListDatasets",
            ragflow__pb2.ListDatasetsRequest.SerializeToString,
            ragflow__pb2.ListDatasetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateDataset(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/UpdateDataset",
            ragflow__pb2.UpdateDatasetRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteDatasets(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/DeleteDatasets",
            ragflow__pb2.DeleteDatasetsRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UploadDocument(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/UploadDocument",
            ragflow__pb2.UploadDocumentRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Chat(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/Chat",
            ragflow__pb2.ChatRequest.SerializeToString,
            ragflow__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

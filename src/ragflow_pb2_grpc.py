# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ragflow_pb2 as ragflow__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ragflow_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RagServicesStub(object):
    """gRPC Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateKnowledgeBase = channel.unary_unary(
                '/ragflow.RagServices/CreateKnowledgeBase',
                request_serializer=ragflow__pb2.CreateKnowledgeBaseRequest.SerializeToString,
                response_deserializer=ragflow__pb2.CreateKnowledgeBaseResponse.FromString,
                _registered_method=True)
        self.ListDatasets = channel.unary_unary(
                '/ragflow.RagServices/ListDatasets',
                request_serializer=ragflow__pb2.ListDatasetsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.ListDatasetsResponse.FromString,
                _registered_method=True)
        self.UpdateDataset = channel.unary_unary(
                '/ragflow.RagServices/UpdateDataset',
                request_serializer=ragflow__pb2.UpdateDatasetRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.DeleteDatasets = channel.unary_unary(
                '/ragflow.RagServices/DeleteDatasets',
                request_serializer=ragflow__pb2.DeleteDatasetsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.UploadDocument = channel.unary_unary(
                '/ragflow.RagServices/UploadDocument',
                request_serializer=ragflow__pb2.UploadDocumentRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ListDocuments = channel.unary_unary(
                '/ragflow.RagServices/ListDocuments',
                request_serializer=ragflow__pb2.ListDocumentsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.ListDocumentsResponse.FromString,
                _registered_method=True)
        self.UpdateDocument = channel.unary_unary(
                '/ragflow.RagServices/UpdateDocument',
                request_serializer=ragflow__pb2.UpdateDocumentRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.DownloadDocument = channel.unary_unary(
                '/ragflow.RagServices/DownloadDocument',
                request_serializer=ragflow__pb2.DownloadDocumentRequest.SerializeToString,
                response_deserializer=ragflow__pb2.DownloadDocumentResponse.FromString,
                _registered_method=True)
        self.DeleteDocuments = channel.unary_unary(
                '/ragflow.RagServices/DeleteDocuments',
                request_serializer=ragflow__pb2.DeleteDocumentsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ParseDocuments = channel.unary_unary(
                '/ragflow.RagServices/ParseDocuments',
                request_serializer=ragflow__pb2.ParseDocumentsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.CreateChatAssistant = channel.unary_unary(
                '/ragflow.RagServices/CreateChatAssistant',
                request_serializer=ragflow__pb2.CreateChatAssistantRequest.SerializeToString,
                response_deserializer=ragflow__pb2.CreateChatAssistantResponse.FromString,
                _registered_method=True)
        self.ListChatAssistants = channel.unary_unary(
                '/ragflow.RagServices/ListChatAssistants',
                request_serializer=ragflow__pb2.ListChatAssistantsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.ListChatAssistantsResponse.FromString,
                _registered_method=True)
        self.UpdateChatAssistant = channel.unary_unary(
                '/ragflow.RagServices/UpdateChatAssistant',
                request_serializer=ragflow__pb2.UpdateChatAssistantRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.DeleteChatAssistants = channel.unary_unary(
                '/ragflow.RagServices/DeleteChatAssistants',
                request_serializer=ragflow__pb2.DeleteChatAssistantsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.CreateSession = channel.unary_unary(
                '/ragflow.RagServices/CreateSession',
                request_serializer=ragflow__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=ragflow__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.ListSessions = channel.unary_unary(
                '/ragflow.RagServices/ListSessions',
                request_serializer=ragflow__pb2.ListSessionsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.ListSessionsResponse.FromString,
                _registered_method=True)
        self.UpdateSession = channel.unary_unary(
                '/ragflow.RagServices/UpdateSession',
                request_serializer=ragflow__pb2.UpdateSessionRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.DeleteSessions = channel.unary_unary(
                '/ragflow.RagServices/DeleteSessions',
                request_serializer=ragflow__pb2.DeleteSessionsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.CreateChunk = channel.unary_unary(
                '/ragflow.RagServices/CreateChunk',
                request_serializer=ragflow__pb2.CreateChunkRequest.SerializeToString,
                response_deserializer=ragflow__pb2.CreateChunkResponse.FromString,
                _registered_method=True)
        self.ListChunks = channel.unary_unary(
                '/ragflow.RagServices/ListChunks',
                request_serializer=ragflow__pb2.ListChunksRequest.SerializeToString,
                response_deserializer=ragflow__pb2.ListChunksResponse.FromString,
                _registered_method=True)
        self.UpdateChunk = channel.unary_unary(
                '/ragflow.RagServices/UpdateChunk',
                request_serializer=ragflow__pb2.UpdateChunkRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.DeleteChunks = channel.unary_unary(
                '/ragflow.RagServices/DeleteChunks',
                request_serializer=ragflow__pb2.DeleteChunksRequest.SerializeToString,
                response_deserializer=ragflow__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ChatCompletions = channel.unary_unary(
                '/ragflow.RagServices/ChatCompletions',
                request_serializer=ragflow__pb2.ChatCompletionsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.ChatCompletionsResponse.FromString,
                _registered_method=True)
        self.Embeddings = channel.unary_unary(
                '/ragflow.RagServices/Embeddings',
                request_serializer=ragflow__pb2.EmbeddingsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.EmbeddingsResponse.FromString,
                _registered_method=True)
        self.Models = channel.unary_unary(
                '/ragflow.RagServices/Models',
                request_serializer=ragflow__pb2.ModelsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.ModelsResponse.FromString,
                _registered_method=True)
        self.SearchDocuments = channel.unary_unary(
                '/ragflow.RagServices/SearchDocuments',
                request_serializer=ragflow__pb2.SearchDocumentsRequest.SerializeToString,
                response_deserializer=ragflow__pb2.SearchDocumentsResponse.FromString,
                _registered_method=True)
        self.RetrieveChunks = channel.unary_unary(
                '/ragflow.RagServices/RetrieveChunks',
                request_serializer=ragflow__pb2.RetrieveChunksRequest.SerializeToString,
                response_deserializer=ragflow__pb2.RetrieveChunksResponse.FromString,
                _registered_method=True)
        self.SimilaritySearch = channel.unary_unary(
                '/ragflow.RagServices/SimilaritySearch',
                request_serializer=ragflow__pb2.SimilaritySearchRequest.SerializeToString,
                response_deserializer=ragflow__pb2.SimilaritySearchResponse.FromString,
                _registered_method=True)
        self.Chat = channel.unary_unary(
                '/ragflow.RagServices/Chat',
                request_serializer=ragflow__pb2.ChatRequest.SerializeToString,
                response_deserializer=ragflow__pb2.ChatResponse.FromString,
                _registered_method=True)


class RagServicesServicer(object):
    """gRPC Service Definition
    """

    def CreateKnowledgeBase(self, request, context):
        """Dataset Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadDocument(self, request, context):
        """Document Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDocuments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDocuments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParseDocuments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateChatAssistant(self, request, context):
        """Chat Assistant Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListChatAssistants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateChatAssistant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteChatAssistants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Session Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSessions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSessions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateChunk(self, request, context):
        """Chunk Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListChunks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteChunks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatCompletions(self, request, context):
        """OpenAI Compatible APIs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Embeddings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Models(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchDocuments(self, request, context):
        """Retrieval/Search
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveChunks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimilaritySearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request, context):
        """Chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RagServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateKnowledgeBase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKnowledgeBase,
                    request_deserializer=ragflow__pb2.CreateKnowledgeBaseRequest.FromString,
                    response_serializer=ragflow__pb2.CreateKnowledgeBaseResponse.SerializeToString,
            ),
            'ListDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatasets,
                    request_deserializer=ragflow__pb2.ListDatasetsRequest.FromString,
                    response_serializer=ragflow__pb2.ListDatasetsResponse.SerializeToString,
            ),
            'UpdateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDataset,
                    request_deserializer=ragflow__pb2.UpdateDatasetRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'DeleteDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDatasets,
                    request_deserializer=ragflow__pb2.DeleteDatasetsRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'UploadDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadDocument,
                    request_deserializer=ragflow__pb2.UploadDocumentRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'ListDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDocuments,
                    request_deserializer=ragflow__pb2.ListDocumentsRequest.FromString,
                    response_serializer=ragflow__pb2.ListDocumentsResponse.SerializeToString,
            ),
            'UpdateDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDocument,
                    request_deserializer=ragflow__pb2.UpdateDocumentRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'DownloadDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadDocument,
                    request_deserializer=ragflow__pb2.DownloadDocumentRequest.FromString,
                    response_serializer=ragflow__pb2.DownloadDocumentResponse.SerializeToString,
            ),
            'DeleteDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDocuments,
                    request_deserializer=ragflow__pb2.DeleteDocumentsRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'ParseDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.ParseDocuments,
                    request_deserializer=ragflow__pb2.ParseDocumentsRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'CreateChatAssistant': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateChatAssistant,
                    request_deserializer=ragflow__pb2.CreateChatAssistantRequest.FromString,
                    response_serializer=ragflow__pb2.CreateChatAssistantResponse.SerializeToString,
            ),
            'ListChatAssistants': grpc.unary_unary_rpc_method_handler(
                    servicer.ListChatAssistants,
                    request_deserializer=ragflow__pb2.ListChatAssistantsRequest.FromString,
                    response_serializer=ragflow__pb2.ListChatAssistantsResponse.SerializeToString,
            ),
            'UpdateChatAssistant': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateChatAssistant,
                    request_deserializer=ragflow__pb2.UpdateChatAssistantRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'DeleteChatAssistants': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteChatAssistants,
                    request_deserializer=ragflow__pb2.DeleteChatAssistantsRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=ragflow__pb2.CreateSessionRequest.FromString,
                    response_serializer=ragflow__pb2.CreateSessionResponse.SerializeToString,
            ),
            'ListSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSessions,
                    request_deserializer=ragflow__pb2.ListSessionsRequest.FromString,
                    response_serializer=ragflow__pb2.ListSessionsResponse.SerializeToString,
            ),
            'UpdateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSession,
                    request_deserializer=ragflow__pb2.UpdateSessionRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'DeleteSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSessions,
                    request_deserializer=ragflow__pb2.DeleteSessionsRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'CreateChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateChunk,
                    request_deserializer=ragflow__pb2.CreateChunkRequest.FromString,
                    response_serializer=ragflow__pb2.CreateChunkResponse.SerializeToString,
            ),
            'ListChunks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListChunks,
                    request_deserializer=ragflow__pb2.ListChunksRequest.FromString,
                    response_serializer=ragflow__pb2.ListChunksResponse.SerializeToString,
            ),
            'UpdateChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateChunk,
                    request_deserializer=ragflow__pb2.UpdateChunkRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'DeleteChunks': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteChunks,
                    request_deserializer=ragflow__pb2.DeleteChunksRequest.FromString,
                    response_serializer=ragflow__pb2.StatusResponse.SerializeToString,
            ),
            'ChatCompletions': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatCompletions,
                    request_deserializer=ragflow__pb2.ChatCompletionsRequest.FromString,
                    response_serializer=ragflow__pb2.ChatCompletionsResponse.SerializeToString,
            ),
            'Embeddings': grpc.unary_unary_rpc_method_handler(
                    servicer.Embeddings,
                    request_deserializer=ragflow__pb2.EmbeddingsRequest.FromString,
                    response_serializer=ragflow__pb2.EmbeddingsResponse.SerializeToString,
            ),
            'Models': grpc.unary_unary_rpc_method_handler(
                    servicer.Models,
                    request_deserializer=ragflow__pb2.ModelsRequest.FromString,
                    response_serializer=ragflow__pb2.ModelsResponse.SerializeToString,
            ),
            'SearchDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchDocuments,
                    request_deserializer=ragflow__pb2.SearchDocumentsRequest.FromString,
                    response_serializer=ragflow__pb2.SearchDocumentsResponse.SerializeToString,
            ),
            'RetrieveChunks': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveChunks,
                    request_deserializer=ragflow__pb2.RetrieveChunksRequest.FromString,
                    response_serializer=ragflow__pb2.RetrieveChunksResponse.SerializeToString,
            ),
            'SimilaritySearch': grpc.unary_unary_rpc_method_handler(
                    servicer.SimilaritySearch,
                    request_deserializer=ragflow__pb2.SimilaritySearchRequest.FromString,
                    response_serializer=ragflow__pb2.SimilaritySearchResponse.SerializeToString,
            ),
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=ragflow__pb2.ChatRequest.FromString,
                    response_serializer=ragflow__pb2.ChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ragflow.RagServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ragflow.RagServices', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RagServices(object):
    """gRPC Service Definition
    """

    @staticmethod
    def CreateKnowledgeBase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/CreateKnowledgeBase',
            ragflow__pb2.CreateKnowledgeBaseRequest.SerializeToString,
            ragflow__pb2.CreateKnowledgeBaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/ListDatasets',
            ragflow__pb2.ListDatasetsRequest.SerializeToString,
            ragflow__pb2.ListDatasetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/UpdateDataset',
            ragflow__pb2.UpdateDatasetRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/DeleteDatasets',
            ragflow__pb2.DeleteDatasetsRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/UploadDocument',
            ragflow__pb2.UploadDocumentRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/ListDocuments',
            ragflow__pb2.ListDocumentsRequest.SerializeToString,
            ragflow__pb2.ListDocumentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/UpdateDocument',
            ragflow__pb2.UpdateDocumentRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/DownloadDocument',
            ragflow__pb2.DownloadDocumentRequest.SerializeToString,
            ragflow__pb2.DownloadDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/DeleteDocuments',
            ragflow__pb2.DeleteDocumentsRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ParseDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/ParseDocuments',
            ragflow__pb2.ParseDocumentsRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateChatAssistant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/CreateChatAssistant',
            ragflow__pb2.CreateChatAssistantRequest.SerializeToString,
            ragflow__pb2.CreateChatAssistantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListChatAssistants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/ListChatAssistants',
            ragflow__pb2.ListChatAssistantsRequest.SerializeToString,
            ragflow__pb2.ListChatAssistantsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateChatAssistant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/UpdateChatAssistant',
            ragflow__pb2.UpdateChatAssistantRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteChatAssistants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/DeleteChatAssistants',
            ragflow__pb2.DeleteChatAssistantsRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/CreateSession',
            ragflow__pb2.CreateSessionRequest.SerializeToString,
            ragflow__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/ListSessions',
            ragflow__pb2.ListSessionsRequest.SerializeToString,
            ragflow__pb2.ListSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/UpdateSession',
            ragflow__pb2.UpdateSessionRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/DeleteSessions',
            ragflow__pb2.DeleteSessionsRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/CreateChunk',
            ragflow__pb2.CreateChunkRequest.SerializeToString,
            ragflow__pb2.CreateChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListChunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/ListChunks',
            ragflow__pb2.ListChunksRequest.SerializeToString,
            ragflow__pb2.ListChunksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/UpdateChunk',
            ragflow__pb2.UpdateChunkRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteChunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/DeleteChunks',
            ragflow__pb2.DeleteChunksRequest.SerializeToString,
            ragflow__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChatCompletions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/ChatCompletions',
            ragflow__pb2.ChatCompletionsRequest.SerializeToString,
            ragflow__pb2.ChatCompletionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Embeddings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/Embeddings',
            ragflow__pb2.EmbeddingsRequest.SerializeToString,
            ragflow__pb2.EmbeddingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Models(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/Models',
            ragflow__pb2.ModelsRequest.SerializeToString,
            ragflow__pb2.ModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/SearchDocuments',
            ragflow__pb2.SearchDocumentsRequest.SerializeToString,
            ragflow__pb2.SearchDocumentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RetrieveChunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/RetrieveChunks',
            ragflow__pb2.RetrieveChunksRequest.SerializeToString,
            ragflow__pb2.RetrieveChunksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SimilaritySearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/SimilaritySearch',
            ragflow__pb2.SimilaritySearchRequest.SerializeToString,
            ragflow__pb2.SimilaritySearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ragflow.RagServices/Chat',
            ragflow__pb2.ChatRequest.SerializeToString,
            ragflow__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
